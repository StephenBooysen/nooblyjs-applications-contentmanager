<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Assets - CMS</title>
    <link rel="stylesheet" href="/applications/cms/css/dashboard.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
    <div class="dashboard-container">
        <!-- Sidebar -->
        <nav class="sidebar">
            <div class="sidebar-header">
                <h2><i class="fas fa-cube"></i> CMS</h2>
            </div>

            <ul class="sidebar-menu">
                <li>
                    <a href="/applications/cms/dashboard">
                        <i class="fas fa-tachometer-alt"></i>
                        <span>Dashboard</span>
                    </a>
                </li>
                <li>
                    <a href="/applications/cms/sites">
                        <i class="fas fa-globe"></i>
                        <span>Sites</span>
                    </a>
                </li>
                <li>
                    <a href="/applications/cms/pages">
                        <i class="fas fa-file-alt"></i>
                        <span>Pages</span>
                    </a>
                </li>
                <li class="active">
                    <a href="/applications/cms/assets">
                        <i class="fas fa-images"></i>
                        <span>Assets</span>
                    </a>
                </li>
                <li>
                    <a href="/applications/cms/templates">
                        <i class="fas fa-layer-group"></i>
                        <span>Templates</span>
                    </a>
                </li>
                <li>
                    <a href="/applications/cms/themes">
                        <i class="fas fa-palette"></i>
                        <span>Themes</span>
                    </a>
                </li>
                <li>
                    <a href="/applications/cms/analytics">
                        <i class="fas fa-chart-bar"></i>
                        <span>Analytics</span>
                    </a>
                </li>
                <li>
                    <a href="/applications/cms/settings">
                        <i class="fas fa-cog"></i>
                        <span>Settings</span>
                    </a>
                </li>
            </ul>

            <div class="sidebar-footer">
                <div class="user-info">
                    <i class="fas fa-user-circle"></i>
                    <span id="current-user"><%= user.username %></span>
                </div>
                <button class="logout-btn" onclick="logout()">
                    <i class="fas fa-sign-out-alt"></i>
                    Logout
                </button>
            </div>
        </nav>

        <!-- Main Content -->
        <main class="main-content">
            <!-- Header -->
            <header class="content-header">
                <div class="header-left">
                    <h1>Assets</h1>
                    <p>Manage your media files and assets</p>
                </div>
                <div class="header-right">
                    <button class="btn btn-primary" onclick="openUploadModal()">
                        <i class="fas fa-upload"></i>
                        Upload Asset
                    </button>
                </div>
            </header>

            <!-- Filters -->
            <div class="filters-section">
                <div class="search-box">
                    <input type="text" id="asset-search" placeholder="Search assets...">
                    <i class="fas fa-search"></i>
                </div>
                <div class="filter-buttons">
                    <button class="filter-btn active" data-type="all">All Assets</button>
                    <button class="filter-btn" data-type="image">Images</button>
                    <button class="filter-btn" data-type="document">Documents</button>
                    <button class="filter-btn" data-type="video">Videos</button>
                </div>
            </div>

            <!-- Assets Grid -->
            <div class="assets-grid" id="assets-container">
                <!-- Assets will be loaded dynamically -->
                <div class="loading">Loading assets...</div>
            </div>
        </main>
    </div>

    <!-- Upload Modal -->
    <div id="upload-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Upload Asset</h2>
                <button class="modal-close" onclick="closeUploadModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <form id="upload-form" enctype="multipart/form-data">
                    <div class="upload-area" id="upload-area">
                        <i class="fas fa-cloud-upload-alt"></i>
                        <p>Drag and drop files here or click to browse</p>
                        <input type="file" id="file-input" multiple accept="image/*,video/*,.pdf,.doc,.docx,.txt">
                    </div>
                    <div class="form-group">
                        <label for="tags">Tags (optional)</label>
                        <input type="text" id="tags" placeholder="website, hero, banner">
                        <small>Comma-separated tags to help organize your assets</small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" onclick="closeUploadModal()">Cancel</button>
                <button class="btn btn-primary" onclick="uploadFiles()">
                    <i class="fas fa-upload"></i>
                    Upload
                </button>
            </div>
        </div>
    </div>

    <script>
        let assets = [];
        let filteredAssets = [];
        let currentFilter = 'all';

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadAssets();
            bindEvents();
            setupDragAndDrop();
        });

        function bindEvents() {
            // Search functionality
            const searchInput = document.getElementById('asset-search');
            searchInput.addEventListener('input', (e) => handleSearch(e.target.value));

            // Filter buttons
            const filterButtons = document.querySelectorAll('.filter-btn');
            filterButtons.forEach(btn => {
                btn.addEventListener('click', (e) => {
                    filterButtons.forEach(b => b.classList.remove('active'));
                    e.target.classList.add('active');
                    currentFilter = e.target.dataset.type;
                    filterAssets();
                });
            });

            // File input
            const fileInput = document.getElementById('file-input');
            fileInput.addEventListener('change', handleFileSelect);
        }

        function setupDragAndDrop() {
            const uploadArea = document.getElementById('upload-area');

            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                uploadArea.addEventListener(eventName, preventDefaults, false);
            });

            ['dragenter', 'dragover'].forEach(eventName => {
                uploadArea.addEventListener(eventName, highlight, false);
            });

            ['dragleave', 'drop'].forEach(eventName => {
                uploadArea.addEventListener(eventName, unhighlight, false);
            });

            uploadArea.addEventListener('drop', handleDrop, false);
            uploadArea.addEventListener('click', () => document.getElementById('file-input').click());

            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }

            function highlight(e) {
                uploadArea.classList.add('drag-over');
            }

            function unhighlight(e) {
                uploadArea.classList.remove('drag-over');
            }

            function handleDrop(e) {
                const dt = e.dataTransfer;
                const files = dt.files;
                document.getElementById('file-input').files = files;
                handleFileSelect({ target: { files } });
            }
        }

        function handleFileSelect(e) {
            const files = e.target.files;
            if (files.length > 0) {
                displaySelectedFiles(files);
            }
        }

        function displaySelectedFiles(files) {
            const uploadArea = document.getElementById('upload-area');
            const fileList = Array.from(files).map(file =>
                `<div class="selected-file">
                    <i class="fas fa-file"></i>
                    <span>${file.name}</span>
                    <small>${formatFileSize(file.size)}</small>
                </div>`
            ).join('');

            uploadArea.innerHTML = `
                <div class="selected-files">
                    <h4>Selected Files:</h4>
                    ${fileList}
                    <button type="button" class="btn btn-sm btn-outline" onclick="clearFiles()">
                        Clear Files
                    </button>
                </div>
            `;
        }

        function clearFiles() {
            document.getElementById('file-input').value = '';
            const uploadArea = document.getElementById('upload-area');
            uploadArea.innerHTML = `
                <i class="fas fa-cloud-upload-alt"></i>
                <p>Drag and drop files here or click to browse</p>
                <input type="file" id="file-input" multiple accept="image/*,video/*,.pdf,.doc,.docx,.txt">
            `;
            document.getElementById('file-input').addEventListener('change', handleFileSelect);
        }

        async function loadAssets() {
            try {
                const response = await fetch('/applications/cms/api/assets');
                if (response.ok) {
                    assets = await response.json();
                    filteredAssets = [...assets];
                    renderAssets();
                } else {
                    showError('Failed to load assets');
                }
            } catch (error) {
                console.error('Error loading assets:', error);
                showError('Error loading assets');
            }
        }

        function filterAssets() {
            if (currentFilter === 'all') {
                filteredAssets = [...assets];
            } else {
                filteredAssets = assets.filter(asset => asset.type === currentFilter);
            }
            renderAssets();
        }

        function handleSearch(query) {
            if (!query) {
                filterAssets();
                return;
            }

            const searchQuery = query.toLowerCase();
            filteredAssets = assets.filter(asset =>
                asset.filename.toLowerCase().includes(searchQuery) ||
                asset.originalName.toLowerCase().includes(searchQuery) ||
                (asset.tags && asset.tags.some(tag => tag.toLowerCase().includes(searchQuery)))
            );
            renderAssets();
        }

        function renderAssets() {
            const container = document.getElementById('assets-container');

            if (filteredAssets.length === 0) {
                container.innerHTML = `
                    <div class="no-assets">
                        <i class="fas fa-images"></i>
                        <h3>No assets found</h3>
                        <p>Upload your first asset to get started</p>
                        <button class="btn btn-primary" onclick="openUploadModal()">
                            <i class="fas fa-upload"></i>
                            Upload Asset
                        </button>
                    </div>
                `;
                return;
            }

            container.innerHTML = filteredAssets.map(asset => createAssetCard(asset)).join('');
        }

        function createAssetCard(asset) {
            const isImage = asset.mimeType && asset.mimeType.startsWith('image/');
            const icon = getFileIcon(asset.mimeType);

            return `
                <div class="asset-card" data-asset-id="${asset.id}">
                    <div class="asset-preview">
                        ${isImage ?
                            `<img src="${asset.url}" alt="${asset.originalName}" loading="lazy">` :
                            `<div class="file-icon"><i class="${icon}"></i></div>`
                        }
                    </div>
                    <div class="asset-info">
                        <h4>${escapeHtml(asset.originalName)}</h4>
                        <p>${formatFileSize(asset.size)} • ${asset.mimeType}</p>
                        ${asset.tags ? `<div class="asset-tags">${asset.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}</div>` : ''}
                    </div>
                    <div class="asset-actions">
                        <button class="btn btn-sm" onclick="copyAssetUrl('${asset.url}')">
                            <i class="fas fa-copy"></i>
                        </button>
                        <button class="btn btn-sm" onclick="downloadAsset('${asset.id}')">
                            <i class="fas fa-download"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="deleteAsset('${asset.id}')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
        }

        function getFileIcon(mimeType) {
            if (!mimeType) return 'fas fa-file';

            if (mimeType.startsWith('image/')) return 'fas fa-image';
            if (mimeType.startsWith('video/')) return 'fas fa-video';
            if (mimeType.startsWith('audio/')) return 'fas fa-music';
            if (mimeType.includes('pdf')) return 'fas fa-file-pdf';
            if (mimeType.includes('word')) return 'fas fa-file-word';
            if (mimeType.includes('sheet')) return 'fas fa-file-excel';
            if (mimeType.includes('presentation')) return 'fas fa-file-powerpoint';

            return 'fas fa-file';
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        function openUploadModal() {
            document.getElementById('upload-modal').style.display = 'block';
        }

        function closeUploadModal() {
            document.getElementById('upload-modal').style.display = 'none';
            clearFiles();
            document.getElementById('tags').value = '';
        }

        async function uploadFiles() {
            const fileInput = document.getElementById('file-input');
            const files = fileInput.files;
            const tags = document.getElementById('tags').value;

            if (files.length === 0) {
                showNotification('Please select files to upload', 'error');
                return;
            }

            try {
                showNotification('Uploading files...', 'info');

                for (const file of files) {
                    const formData = new FormData();
                    formData.append('file', file);
                    formData.append('tags', tags);

                    const response = await fetch('/applications/cms/api/assets/upload', {
                        method: 'POST',
                        body: formData
                    });

                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.error || 'Upload failed');
                    }
                }

                showNotification('Files uploaded successfully!', 'success');
                closeUploadModal();
                await loadAssets(); // Refresh assets
            } catch (error) {
                console.error('Error uploading files:', error);
                showNotification(error.message || 'Failed to upload files', 'error');
            }
        }

        async function copyAssetUrl(url) {
            try {
                await navigator.clipboard.writeText(url);
                showNotification('Asset URL copied to clipboard', 'success');
            } catch (error) {
                console.error('Failed to copy URL:', error);
                showNotification('Failed to copy URL', 'error');
            }
        }

        function downloadAsset(assetId) {
            const asset = assets.find(a => a.id === assetId);
            if (asset) {
                const link = document.createElement('a');
                link.href = asset.url;
                link.download = asset.originalName;
                link.click();
            }
        }

        async function deleteAsset(assetId) {
            const asset = assets.find(a => a.id === assetId);
            if (!confirm(`Are you sure you want to delete "${asset.originalName}"? This action cannot be undone.`)) {
                return;
            }

            try {
                const response = await fetch(`/applications/cms/api/assets/${assetId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    showNotification('Asset deleted successfully', 'success');
                    await loadAssets(); // Refresh assets
                } else {
                    const error = await response.json();
                    showNotification(error.error || 'Failed to delete asset', 'error');
                }
            } catch (error) {
                console.error('Error deleting asset:', error);
                showNotification('Failed to delete asset', 'error');
            }
        }

        // Utility functions
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => {
                notification.remove();
            }, 5000);
        }

        function showError(message) {
            document.getElementById('assets-container').innerHTML = `
                <div class="error-state">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>Error</h3>
                    <p>${message}</p>
                    <button class="btn btn-primary" onclick="loadAssets()">Retry</button>
                </div>
            `;
        }

        async function logout() {
            try {
                const response = await fetch('/applications/cms/api/auth/logout', {
                    method: 'POST'
                });

                if (response.ok) {
                    window.location.href = '/applications/cms/login';
                }
            } catch (error) {
                console.error('Logout failed:', error);
            }
        }
    </script>

    <style>
        .filters-section {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            gap: 1rem;
        }

        .search-box {
            position: relative;
            flex: 1;
            max-width: 400px;
        }

        .search-box input {
            width: 100%;
            padding: 0.75rem 1rem 0.75rem 2.5rem;
            border: 1px solid #e2e8f0;
            border-radius: 0.5rem;
            font-size: 0.875rem;
        }

        .search-box i {
            position: absolute;
            left: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            color: #64748b;
        }

        .filter-buttons {
            display: flex;
            gap: 0.5rem;
        }

        .filter-btn {
            padding: 0.5rem 1rem;
            border: 1px solid #e2e8f0;
            background: white;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            cursor: pointer;
            transition: all 0.2s;
        }

        .filter-btn.active {
            background: #3b82f6;
            color: white;
            border-color: #3b82f6;
        }

        .assets-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1.5rem;
        }

        .asset-card {
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 0.75rem;
            overflow: hidden;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
            transition: all 0.2s;
        }

        .asset-card:hover {
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }

        .asset-preview {
            width: 100%;
            height: 150px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #f8fafc;
        }

        .asset-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .file-icon {
            font-size: 3rem;
            color: #64748b;
        }

        .asset-info {
            padding: 1rem;
        }

        .asset-info h4 {
            font-size: 0.875rem;
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 0.25rem;
            word-break: break-word;
        }

        .asset-info p {
            font-size: 0.75rem;
            color: #64748b;
            margin-bottom: 0.5rem;
        }

        .asset-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 0.25rem;
        }

        .tag {
            padding: 0.125rem 0.5rem;
            background: #e2e8f0;
            border-radius: 1rem;
            font-size: 0.625rem;
            color: #64748b;
        }

        .asset-actions {
            padding: 1rem;
            display: flex;
            gap: 0.5rem;
            border-top: 1px solid #f1f5f9;
        }

        .btn-danger {
            background: #ef4444;
            color: white;
        }

        .btn-danger:hover {
            background: #dc2626;
        }

        .no-assets, .error-state {
            grid-column: 1 / -1;
            text-align: center;
            padding: 3rem 1rem;
            color: #64748b;
        }

        .no-assets i, .error-state i {
            font-size: 3rem;
            margin-bottom: 1rem;
            color: #cbd5e1;
        }

        .no-assets h3, .error-state h3 {
            font-size: 1.5rem;
            color: #374151;
            margin-bottom: 0.5rem;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 2000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 0;
            border-radius: 0.75rem;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        }

        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid #e2e8f0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-header h2 {
            margin: 0;
            font-size: 1.25rem;
            font-weight: 600;
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #64748b;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .modal-footer {
            padding: 1.5rem;
            border-top: 1px solid #e2e8f0;
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
        }

        .upload-area {
            border: 2px dashed #d1d5db;
            border-radius: 0.5rem;
            padding: 2rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.2s;
            margin-bottom: 1rem;
        }

        .upload-area:hover,
        .upload-area.drag-over {
            border-color: #3b82f6;
            background: #f0f9ff;
        }

        .upload-area i {
            font-size: 3rem;
            color: #64748b;
            margin-bottom: 1rem;
        }

        .upload-area input[type="file"] {
            display: none;
        }

        .selected-files {
            text-align: left;
        }

        .selected-file {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem;
            background: #f8fafc;
            border-radius: 0.375rem;
            margin-bottom: 0.5rem;
        }

        .selected-file i {
            color: #3b82f6;
        }

        .selected-file small {
            margin-left: auto;
            color: #64748b;
        }

        @media (max-width: 768px) {
            .filters-section {
                flex-direction: column;
                align-items: stretch;
            }

            .assets-grid {
                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            }

            .modal-content {
                margin: 10% auto;
                width: 95%;
            }
        }
    </style>
</body>
</html>